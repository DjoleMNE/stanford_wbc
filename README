				README
		Stanford Whole-Body Control Framework
		 http://stanford-wbc.sourceforge.net/

----------------------------------------------------------------------
Copyright (c) 1997-2009 Stanford University. All rights reserved.

This program is free software: you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public License
as published by the Free Software Foundation, either version 3 of
the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this program.  If not, see
<http://www.gnu.org/licenses/>
----------------------------------------------------------------------


= PREREQUISITES =

The CMake checks will signal any missing prerequisites and warn about
missing optional or recommended 3rd party libraries.

== Non-bundled ==

Install these from your package manager or directly from the original
source:

 * '''A C++ compiler:'''
   The WBC code is developed with GCC http://gcc.gnu.org/ ... other
   compilers should work as well but are not currently tested.
   
 * '''CMake 2.6 or higher:'''
   Widely available from package managers. You can also get it from
   http://www.cmake.org/ (especially if your distro provides an older
   version such as CMake-2.4)

 * '''GNU ncurses''' (version 5 seems to work fine):
   Widely available from package managers.
   http://www.gnu.org/software/ncurses/

 * '''LAPACK''' (and thus, BLAS):
   Widely available as packages.

== Bundled ==

We provide snaphsots, patches, and build scripts (mostly) in the 3rdparty
subdirectory, of the following external open source projects.

Given that log4cxx, gtest, and XmlRpc++ are somewhat likely to need
custom installation on your machine, you can tell CMake where to find
them by using the environment (or CMake) variables LOG4CXX_DIR,
GTEST_DIR, and XMLRPC_DIR. If they are all installed in the same
location, you can just set one of these three variables and the build
system should find them all.

 * Required:
   * '''tinyxml'''
     We provide a (fairly old) snapshot directly with a CMakeLists.txt
     that ties it directly into the WBC build system. Actually, we
     stuffed all of the tinyxml code into a separate namespace and
     renamed the file by adding the {{{wbc_}}} prefix, in order to
     allow Stanford-WBC to live side-by-side with other libraries
     which might use a different version of tinyxml.
     http://www.grinninglizard.com/tinyxml/
   * '''expat version 1 or 2'''
     Also available as package on pretty much any distro.
     http://expat.sourceforge.net/

 * Highly recommended:
   * '''log4cxx version 0.10.0''' (higher versions might be supported, too).
     Without log4cxx, you will not be able to control the verbosity of
     programs, they will simply print any warnings and errors to the
     console. It is fairly common that distros provide version 0.9.x,
     which unfortunately is not compatible with WBC, in which case
     you'll have to use the one provided here.
     http://logging.apache.org/log4cxx/

 * Optional:
   * '''!XmlRpc++''' for easier integration with higher levels and GUIs.
     We provide a CVS snapshot (from early 2009) plus some local
     patches.
     http://xmlrpcpp.sourceforge.net/
   * '''Google testing framework version 1.3.0''' (other version might work, too)
     http://code.google.com/p/googletest/


= INSTALLATION =


== Check out the Sources ==

You can follow the stable (branches/wbc-stable) or unstable (trunk)
code. Currently, the trunk is much more likely to work for you, so
let's suppose we follow that. Let's also assume you check out the code
into ~/svn-wbc (you can place it anywhere you like of course).

{{{
 $ svn co https://stanford-wbc.svn.sourceforge.net/svnroot/stanford-wbc/trunk/wbc ~/svn-wbc
}}}


== Install 3rd party libraries ==

Install required 3rdparty libraries, for example into ~/wbc/bindeps
(Let's assume you installed expat as a system package and you only
need log4cxx and gtest, leaving aside xmlrpc++ because you don't
want to do any GUI development)
{{{
 $ cd ~/svn-wbc/src/3rdparty/log4cxx
 $ ./buildme.sh ~/wbc/bindeps
 $ cd ~/svn-wbc/src/3rdparty/gtest
 $ ./buildme.sh ~/wbc/bindeps
}}}

'''NOTES:'''

 * Many Linux distributions provide log4cxx development packages at a
   sufficiently recent version, and gtest is not absolutely required
   (although it's a good idea to use it, especially if you are likely
   to change framework code).
 * You can very easily install these dependencies elsewhere on your
   system. This is actually recommended if you are using them for
   other projects as well. See the notes about {{{GTEST_DIR}}},
   {{{XMLRPC_DIR}}}, and {{{LOG4CXX_DIR}}} in the next section.


== Setup your environment ==

Choose a directory to install WBC. In the following, it is assumed
that you use a somewhat canonical directory layout underneath
${HOME}/wbc, but you can easily adjust this to your needs.

 1. Set the WBC environment variables. The "standard" setup is to use
   {{{~/wbc}}} as the installation directory. You can (and should)
   keep the sources somewhere else though, as illustrated
   above. Assuming your are using bash, these are the commands for
   setting the environment variables (but see NOTE below for an
   automated way of doing this):
   {{{
    $ export WBC_ROOT=~/wbc
   }}}
    For csh or tcsh users, these would look something like "{{{setenv WBC_ROOT ~/wbc}}}" or so.

 2. If you want to keep some of the 3rdparty dependencies elsewhere on
    your system (for example in order to use them in other projects as
    well), you can optionally use the following environment variables
    to point to more specific directories:
    * {{{GTEST_DIR}}}
    * {{{XMLRPC_DIR}}}
    * {{{LOG4CXX_DIR}}}
    
    For details on how these variables get used, read the
    {{{wbc_getvars()}}} macro in the top-level {{{wbc.cmake}}}
    file.
    
    A typical use case is to have log4cxx underneath
    {{{/usr/local/log4cxx}}}, in which case you want set
    {{{LOG4CXX_DIR}}} like so:
   {{{
    $ export LOG4CXX_DIR=/usr/local/log4cxx
   }}}


== Install the WBC framework ==

Configure, build, and install WBC. The recommended way is to build it
in a separate directory so that it becomes very easy to clean it
out. Also note that CMake has a kind of convoluted way of specifying
the installation directory... don't forget the
'''{{{-DCMAKE_INSTALL_PREFIX=~/wbc}}}''' command line argument!
{{{
 $ mkdir ~/svn-wbc/build
 $ cd ~/svn-wbc/build
 $ cmake ~/svn-wbc -DCMAKE_INSTALL_PREFIX=~/wbc
 $ make
 $ make install
}}}


= UPGRADING =

In order to upgrade WBC, usually all you have to do is "svn update"
your checked-out copy, recompile on top of your existing build, and
re-install (see first subsection). That would lead to the following
sequence of commands:

{{{
 $ cd ~/svn-wbc
 $ svn up
 $ cd build
 $ make
 $ make install
}}}

However, in case some major changes were introduced, it might be
better to clean out your previous installation and build directories
(see second subsection). But then, you can at least reuse the 3rdparty
packages that were installed in the ~/wbc/bindeps directory (or some
other cutsom location)... which is another reason why you shouldn't
install the dependencies underneath ~/wbc because then you can just
blow away the entire installation. Anyway, the sequence of commands
would look like this:

{{{
 $ cd ~/wbc
 $ rm -r include lib bin share
 $ cd ~/svn-wbc
 $ svn up
 $ rm -r build
 $ mkdir build
 $ cmake .. -DCMAKE_INSTALL_PREFIX=~/wbc
 $ make
 $ make install
}}}
