list (APPEND TEST_LIBS wbcrun wbcnet)

if (${WBCRUN_HAVE_MQUEUE})
  list (APPEND TEST_LIBS rt)
endif (${WBCRUN_HAVE_MQUEUE})

### try to find Google testing framework

message (STATUS "GTEST_DIR is \"${GTEST_DIR}\"")
if (GTEST_DIR)
  message (STATUS "using GTEST_DIR")
  list (APPEND CMAKE_REQUIRED_INCLUDES ${GTEST_DIR}/include ${GTEST_DIR})
  include_directories (${GTEST_DIR}/include ${GTEST_DIR})
  link_directories (${GTEST_DIR}/lib ${GTEST_DIR})
else (GTEST_DIR)
  message (STATUS "no GTEST_DIR")
  list (APPEND CMAKE_REQUIRED_INCLUDES ${WBCRUN_BINARY_DIR})
  include_directories (${WBCRUN_BINARY_DIR})
endif (GTEST_DIR)

include (CheckIncludeFileCXX)
check_include_file_cxx (gtest/gtest.h WBCRUN_HAVE_GTEST)
if (${WBCRUN_HAVE_GTEST})
  message (STATUS "Found Google testing framework.")
#XXXX to do: resurrect test_model_servo (in ../bin or so)
###  add_executable (test_model_servo test_model_servo.cpp TestDirectory.cpp)
###  target_link_libraries (test_model_servo ${TEST_LIBS} gtest)
  add_executable (test_factory test_factory.cpp)
  target_link_libraries (test_factory gtest)
else (${WBCRUN_HAVE_GTEST})
  message (STATUS "WARNING Google testing framework not found")
  message (STATUS "if compilation fails, use -DGTEST_DIR:path=/where/ever")
endif (${WBCRUN_HAVE_GTEST})

### stuff that's independent of Google testing framework

check_include_file_cxx (boost/shared_ptr.hpp WBCRUN_HAVE_BOOST)
if (${WBCRUN_HAVE_BOOST})
  add_executable (test_process test_process.cpp)
  target_link_libraries (test_process ${TEST_LIBS})
endif (${WBCRUN_HAVE_BOOST})

if (${WBCRUN_HAVE_XMLRPC})
  message (STATUS "Adding tests for XmlRpc++ dependent code")
  add_executable (test_directory_server test_directory_server.cpp TestDirectory.cpp)
  target_link_libraries (test_directory_server ${TEST_LIBS} XmlRpc)
endif (${WBCRUN_HAVE_XMLRPC})

add_library (TestModule MODULE TestModule.cpp)
add_executable (test_module test_module.cpp)
if (CMAKE_SYSTEM_NAME MATCHES OpenBSD)
  target_link_libraries (test_module ${TEST_LIBS})
else (CMAKE_SYSTEM_NAME MATCHES OpenBSD)
  target_link_libraries (test_module dl ${TEST_LIBS})
endif (CMAKE_SYSTEM_NAME MATCHES OpenBSD)
