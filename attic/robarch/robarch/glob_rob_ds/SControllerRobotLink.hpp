/*
 * Stanford Whole-Body Control Framework http://stanford-wbc.sourceforge.net/
 *
 * Copyright (c) 2009 Stanford University. All rights reserved.
 *
 * This program is free software: you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation, either version 3 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this program.  If not, see
 * <http://www.gnu.org/licenses/>
 */

#ifndef SROBOTLINKSTRUCTURES_HPP_
#define SROBOTLINKSTRUCTURES_HPP_

//NOTE TODO Substitute these with the appropriate headers after this is added to the build system
#include <map>
#include <list>
#include <string>
#include <vector>

#include "SGlobalRobotDS.hpp"

#ifdef ROBARCH_IS_WINDOWS_
  #include "PrVector3.h"
  #include "PrMatrix3.h"

  //Arachi library for windows instead of the tao library.
  #include "DeDNode.h"
  //(Quite conveniently) DeNode resides in DeBaseNode! :)
  #include "DeBaseNode.h"
  #include "DeDynamics.h"
  #include "DeJoint.h"
  #include "DeFrame.h"

  class DeDNode;
  class DeNode;
  class DeFrame;

  //Typedefs to remove compile errors on windoze.
  typedef double deFloat;

  typedef PrVector3 deVector3;
  typedef PrVector3 SAIVector3;
  typedef PrMatrix3 SAIMatrix3;
  typedef DeDNode taoDNode;
  typedef DeNode taoNode;
  typedef DeFrame deFrame;
  //NOTE TODO : Is there any specific root node for arachi?
  typedef DeBaseNode taoNodeRoot;
#endif

#ifndef ROBARCH_IS_WINDOWS_
  #include <saimatrix/SAIVector.h>
  #include <saimatrix/SAIMatrix.h>

  #include <tao/matrix/TaoDeMath.h>
  #include <tao/dynamics/taoNode.h>
  #include <tao/dynamics/taoDynamics.h>
  #include <tao/utility/TaoDeMassProp.h>
  #include <tao/dynamics/taoJoint.h> 

  using namespace std;

  //Defined in the headers
  class taoDNode;
  class taoNode;
  class taoNodeRoot;
#endif

namespace robotarchitect
{
							 
/**This structure contains all the information required to construct
 * a robot link. Each robot is completely defined by a tree of such 
 * links. */
struct SControllerRobotLink
{
public:    
	//Constructor@End of the class:
	
	//***********************
  //Link-specific data:
  
  //1. Identifiers
  std::string robot_name_;
  int link_id_, parent_link_id_; //Ids are not read in from a file. They are autogenerated by wbc
  
  //2. Tree structure information:
  SControllerRobotLink* parent_addr_;
  vector<SControllerRobotLink*> child_addr_vector_;
  
  
  //***********************
  //1. Tao tree structure information:
  taoNode* tao_node_addr_; //This node in the tao tree
  taoNodeRoot* tao_node_root_addr_; //The root of the tao tree
  
  //2. Link Properties
  bool is_root_;
	std::string link_name_;   

  deVector3 pos_in_parent_;
  deQuaternion ori_in_parent_;

  deVector3 com_; //Center of mass    
  deFloat mass_;
  deVector3 inertia_;
  deVector3 rot_axis_;
  deFloat rot_angle_;
  deFrame home_frame_;
  int link_is_fixed_;

  //3. Joint information
  std::string joint_name_;
  std::string parent_link_name_;
  deFloat joint_limit_lower_, joint_limit_upper_;
  deFloat joint_default_pos_;
  int joint_axis_; //[x=0 y=1 z=2]
  JointType joint_type_;
  bool joint_is_free_; //Is the joint controlled or not
  
  //3. Graphics data
  std::vector<std::string> obj_file_vec_;
  int collision_type_;
  
  
  //***********
  //Constructor
	SControllerRobotLink()
	{
		is_root_ = false;  
		link_id_ = -2; //arbitrary  
		parent_link_id_ = -2; //arbitrary
	  link_name_ = "not_assigned";
	  parent_link_name_ = "not_assigned";
	  robot_name_ = "not_assigned";
	  joint_name_ = "not_assigned";
	  joint_limit_lower_ = -3.14;
	  joint_limit_upper_ = 3.14; 
	  
	  //Tree structure information:
	  parent_addr_ = NULL;  
	  child_addr_vector_.clear();
	  
	  //TAO Physical Properties
		tao_node_addr_ = NULL;
		tao_node_root_addr_ = NULL;
		
		//Link's Physical Properties
	  com_.set(0, 0, 0);
	  inertia_.set(0,0,0);
	  rot_axis_.set(0,0,0);

	  joint_axis_ = -1;
	  mass_ = -1;	  
	  rot_angle_ = 0;
	  link_is_fixed_ = 0;
	  joint_type_ = JT_NOTASSIGNED;
	  joint_is_free_ = false;
	}
};

}//end of namespace robotarchitect

#endif /*ROBOTLINKSTRUCTURES_HPP_*/